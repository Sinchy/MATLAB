function GenerateJobs(file_dir, file_name, job_num, VSC_label)
if ~exist('VSC_label', 'var') || VSC_label == 0    
    a = dir([file_dir 'cam3']);
    frame_num = size(a, 1) - 10; % minus 10 just in case some of them are not preprocessed.
    section = floor(frame_num / job_num);
    VSC_label = 0;
elseif VSC_label == 1
    section = 1000;
elseif VSC_label == 2
    section = 101;
end

for i = 1 : job_num
fileID = fopen([file_dir file_name '_' num2str(i) '.sh'],'w');
code_dir = extractBefore(file_dir, 'scratch');
txt = [ '#!/bin/bash -l \n' ...
'#SBATCH --job-name=' file_name '_' num2str(i) '\n' ...
'#SBATCH --time=72:00:00 \n' ... 
'#SBATCH --nodes=1 \n' ...
'#SBATCH --cpus-per-task=24 \n' ...
'#SBATCH --partition=shared \n' ...
'#SBATCH --mem=100000MB \n' ...
'#SBATCH --mail-type=end \n' ...
'#SBATCH --mail-user=stan26@jhu.edu\n' ...
'\n' ...
'#run your job \n' ...
'module load gcc/6.4.0 \n' ...
'cd ' code_dir 'work/Code/LocalCode/ShakeTheBox/Release \n' ...
'./ShakeTheBox ' file_dir 'trackingconfig' num2str(i) '.txt > ' file_dir 'result' num2str(i) '.txt << EOF \n' ...
'0\n' ...
'0\n' ...
'EOF\n'];
fprintf(fileID, txt);
fclose(fileID);

startframe = section * (i - 1) + 1;
endframe = section * i;
if i == job_num && VSC_label == 0
    endframe = frame_num; 
end
fileID = fopen([file_dir 'trackingconfig' num2str(i) '.txt'],'w');
txt = ['4 # Number of cameras \n'...
'1 # first camera number \n'...
'2 # second camera number \n'...
'3 # third camera number \n'...
'4 # fourth camera number \n'...
'cam1ImageNames.txt # text file with first camera image names \n'...
'cam2ImageNames.txt # text file with second camera image names \n'...
'cam3ImageNames.txt # text file with third camera image names \n'...
'cam4ImageNames.txt # text file with fourth camera image names \n'];
fprintf(fileID, txt);
fprintf(fileID, [file_dir 'iprconfig.txt # Path to ipr configuration file\n']);
fprintf(fileID, [file_dir 'predictivefield.txt # path to predictive field file\n']);
fprintf(fileID, [ num2str(startframe), ' # first frame\n', num2str(endframe), ' #last frame\n']);
txt =['./matched.gdf # stereomatched 3D positions \n'...
'./tracks.gdf # 3D tracks output filename \n'...
'########### View area limits ############ \n'...
'-30 # xmin \n'...
'30  # xmax \n'...
'-30 # ymin \n'...
'30  # xmax \n'...
'-20 # zmin \n'...
'20  # zmax \n'...
'	######### Initial Phase ############## \n'...
'1 # Flag for using ipr in initialphase (or use .mat files) \n'...
'10 # searchRadius for finding tracks using predictive field \n'...
'	######### Convergence Phase ############# \n'...
'.5 # Shaking range for prediciton (vox) \n'...
'10 # Avg Interparticle spacing. (vox) to identify neighbouring tracks \n'...
'10 # Largest expected particle shift between frames (vox)for nearest neighbour linking of short tracks \n'...
'6 # Maximum absolute change in particle shift (vox) \n'...
'100  # Maximum relative change in particle shift (percent) \n'...
'1 # A multyplying factor on particle intensity in order to ensure the residual has no traces of tracked particles \n'...
'0.01 # lower intensity threshold (xx*avg. Intensity) to eliminate ghost particles while tracking \n'...
'0 # Back STB is on for 1\n' ...
'3.5 # the distance between two tracks that are supposed to be the same track \n'];
fprintf(fileID, txt);
fclose(fileID);
end

end

